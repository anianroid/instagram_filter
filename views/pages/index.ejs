<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>


  <style type="text/css">
    html, body {
      font-family: sans-serif;
      background: #ccc;
    }
    .container {
      display: grid;
      grid-gap : 3px;
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
      grid-auto-rows: 320px;
      grid-auto-flow: dense;
      width: 90%;
    }

    .container > div {
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 1.4em;
      border: 1px solid #f2f2f2;
      background: #f2f2f2;
    }
    .container > div > img {
      height: 100%;
      width: 100%;
      object-fit: cover;
    }

    .horizontal {
    /*
    Won't work for this case. Pushes all the divs with this class to the first column starting creating unexpected empty spaces
      grid-column: 1 / span 2; 
    */
      grid-column: span 2;
    }

    .vertical {
      grid-row: span 2;
    }

    .big {
      grid-row: span 2;
      grid-column: span 2;
    }
  </style>


</head>

<body>

<div class="container" id="demo"></div>


<script type="text/javascript" src="https://sdk.clarifai.com/js/clarifai-latest.js"></script>

<script type="text/javascript">

  // instantiate a new Clarifai app passing in your api key.
  const app = new Clarifai.App({
   apiKey: 'e4e46d81280a43c5960395474d8ecdfc'
  });


  (function() {
    const access_token = window.location.href.split('access_token=')[1];
    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function() {
      let images = [];
      JSON.parse(this.response).data.filter(
        (item) => {
          images.push(item.images.standard_resolution.url);
        }
      )
      let = data = [];
      app.models.predict(Clarifai.GENERAL_MODEL, images).then(
        function(response) {
          response.outputs.map(
            (output) => {
              let tags = [];
              output.data.concepts.map(
                (concept) => {
                  tags.push(concept.name);
                }
              )
              data.push(Object.assign({}, {image: output.input.data.image.url, tags: tags}));
            }
          )
          console.log(data);
        },
        function(err) {
          console.error(err);
        }
      );
      console.log(data);
    };
    xhttp.open("GET", "https://api.instagram.com/v1/users/self/media/recent/?access_token="+access_token, true);
    xhttp.send();
  })()
</script>

</body>
</html>
